# Generated by Django 3.2.3 on 2021-06-04 03:48

import datetime
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('patronymic', models.CharField(max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BuildingModel',
            fields=[
                ('building_id', models.AutoField(primary_key=True, serialize=False)),
                ('building_number', models.IntegerField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='CityModel',
            fields=[
                ('city_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeModel',
            fields=[
                ('employee_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=20)),
                ('second_name', models.CharField(max_length=20)),
                ('patronymic', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='FunctionModel',
            fields=[
                ('function_id', models.AutoField(primary_key=True, serialize=False)),
                ('function_name', models.CharField(max_length=20)),
                ('salary', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='HotelClassModel',
            fields=[
                ('hotel_class_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='HotelModel',
            fields=[
                ('hotel_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('buildings', models.ManyToManyField(to='database_view.BuildingModel')),
                ('hotel_class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.hotelclassmodel')),
            ],
        ),
        migrations.CreateModel(
            name='HotelsChainModel',
            fields=[
                ('hotels_chain_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='RoomClassModel',
            fields=[
                ('room_class_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('price', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceClassModel',
            fields=[
                ('service_class_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('price', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='StreetModel',
            fields=[
                ('street_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('city_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.citymodel')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceModel',
            fields=[
                ('service_id', models.AutoField(primary_key=True, serialize=False)),
                ('order_date', models.DateTimeField()),
                ('execution_date', models.DateTimeField()),
                ('employee_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.employeemodel')),
                ('service_class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.serviceclassmodel')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RoomModel',
            fields=[
                ('room_id', models.AutoField(primary_key=True, serialize=False)),
                ('floor', models.IntegerField()),
                ('is_booked', models.BooleanField(default=False)),
                ('hotel_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.hotelmodel')),
                ('room_class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.roomclassmodel')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewModel',
            fields=[
                ('review_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=20)),
                ('mark', models.FloatField()),
                ('hotel_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.hotelmodel')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='hotelmodel',
            name='hotels_chain_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.hotelschainmodel'),
        ),
        migrations.AddField(
            model_name='employeemodel',
            name='function_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.functionmodel'),
        ),
        migrations.AddField(
            model_name='employeemodel',
            name='hotel_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.hotelmodel'),
        ),
        migrations.AddField(
            model_name='buildingmodel',
            name='street_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.streetmodel'),
        ),
        migrations.CreateModel(
            name='BookingRequestModel',
            fields=[
                ('booking_request_id', models.AutoField(primary_key=True, serialize=False)),
                ('planned_check_in_date', models.DateField()),
                ('planned_check_out_date', models.DateField(default=datetime.date(2021, 6, 4))),
                ('status', models.CharField(default='В обработке', max_length=20)),
                ('room_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.roommodel')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BookingModel',
            fields=[
                ('booking_id', models.AutoField(primary_key=True, serialize=False)),
                ('check_in_date', models.DateField()),
                ('check_out_date', models.DateField()),
                ('hotel_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.hotelmodel')),
                ('room_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database_view.roommodel')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
